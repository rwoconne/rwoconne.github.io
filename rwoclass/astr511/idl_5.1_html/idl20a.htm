<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML EXPERIMENTAL 970324//EN">
<HTML>
<STYLE><!--
H1         { font-family: Stone Sans, Helvetica, Arial, sans-serif }
H1.Chapter-Name    { font-size: 36pt }
H2         { font-family: Stone Sans, Helvetica, Arial, sans-serif }
H3         { font-family: Stone Sans, Helvetica, Arial, sans-serif }
H4         { font-family: Stone Sans, Helvetica, Arial, sans-serif }
H5         { font-family: Stone Sans, Helvetica, Arial, sans-serif ;
             margin-top: -5.0pt ; font-size: 12pt }
H6         { font-family: Stone Sans, Helvetica, Arial, sans-serif ;
             margin-top: -5.0pt ; font-size: 12pt }
P          { font-family: Minion, Times, serif }
P.api      { font-family: Courier ; font-weight: Bold }
P.Code     { font-family: Courier, serif ; font-size: 10pt}
P.Code-2   { font-family: Courier, serif ; font-size: 10pt}
P.Code-Result   { font-family: Courier, serif ; font-size: 10pt ;
                  font-weight: Bold}
P.ChapTOC  { font-family: Stone Sans, Helvetica, Arial, sans-serif }
P.Chapter-NameTOC   { font-family: Stone Sans, Helvetica, Arial, sans-serif ;
		      font-size: 20pt; font-weight: Bold }
P.Level2IX	{margin-left: 10pt }
LI.Code-Numbered     { font-family: Courier, serif ; font-size: 10pt}
LI.Code-Numbered-1   { font-family: Courier, serif ; font-size: 10pt}
--></STYLE>

<HEAD>
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter">

<TITLE> WIDGET_TABLE</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<DIV><table width="100%" border=0 cellspacing=0 cellpadding=0> <TR>  <TD></TD>   <TD  bgcolor="#ffffff">     <IMG SRC = "idlmap.gif" USEMAP = "#idlmap.gif" BORDER = 0>   </TD> </TR></TABLE><MAP NAME = "idlmap.gif"><AREA SHAPE=RECT HREF="idl20b.htm" COORDS="290, 29, 344, 43"><AREA SHAPE=RECT HREF="idl.htm" COORDS="139, 29, 239, 46"><AREA SHAPE=RECT HREF="idl209.htm" COORDS="0, 29, 98, 46"><AREA SHAPE=RECT HREF="idl.htm" COORDS="68, 0, 275, 18"></MAP></DIV><HR></DIV>
<H2 CLASS="Routine-Name">
<A NAME="pgfId=896032">
 </A>
<A NAME="35831">
 </A>
WIDGET_TABLE</H2>
<P CLASS="Body">
<A NAME="pgfId=896033">
 </A>
The <A NAME="marker=896327">
 </A>
WIDGET_TABLE function creates<A NAME="marker=896328">
 </A>
 table widgets. Table widgets display two-dimensional data and allow in-place data editing. They can have one or more rows and columns, and automatically create scroll bars when viewing more data than can otherwise be displayed on the screen.</P>
<DIV>
<H6 CLASS="Heading-3">
<A NAME="pgfId=923538">
 </A>
<A NAME="41367">
 </A>
Note on Table Sizing</H6>
<P CLASS="Body">
<A NAME="pgfId=923549">
 </A>
Table widgets are sized according to the value of the following pairs of keywords to WIDGET_TABLE, in order of precedence: <A HREF="idl20a.htm#11786" CLASS="XRef">
SCR_XSIZE</A>
/<A HREF="idl20a.htm#38379" CLASS="XRef">
SCR_YSIZE</A>
, <A HREF="idl20a.htm#19345" CLASS="XRef">
XSIZE</A>
/<A HREF="idl20a.htm#42287" CLASS="XRef">
YSIZE</A>
, <A HREF="idl20a.htm#36815" CLASS="XRef">
X_SCROLL_SIZE</A>
/<A HREF="idl20a.htm#12755" CLASS="XRef">
Y_SCROLL_SIZE</A>
, <A HREF="idl20a.htm#22424" CLASS="XRef">
VALUE</A>
. If either dimension remains unspecified by one of the above keywords, the default value of six (columns or rows) is used when the table is created. If the width or height specified is less than the size of the table, scroll bars are added automatically.</P>
<P CLASS="Body">
<A NAME="pgfId=896034">
 </A>
The returned value of this function is the widget ID of the newly-created table widget.</P>
</DIV>
<DIV>
<H3 CLASS="Heading-1R">
<A NAME="pgfId=896035">
 </A>
Calling Sequence</H3>
<P CLASS="Body">
<A NAME="pgfId=896036">
 </A>
Result = WIDGET_TABLE(<I CLASS="Italic">
Parent</I>
)</P>
</DIV>
<DIV>
<H3 CLASS="Heading-1R">
<A NAME="pgfId=896037">
 </A>
Arguments</H3>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896038">
 </A>
Parent</H4>
<P CLASS="Body">
<A NAME="pgfId=896039">
 </A>
The widget ID of the parent widget for the new table widget.</P>
</DIV>
</DIV>
<DIV>
<H3 CLASS="Heading-1R">
<A NAME="pgfId=896040">
 </A>
Keywords</H3>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896042">
 </A>
<A NAME="marker=896041">
 </A>
ALIGNMENT</H4>
<P CLASS="Body">
<A NAME="pgfId=896043">
 </A>
Set this keyword equal to a scalar or 2-D array specifying the alignment of the text within each cell. An alignment of 0 (the default) aligns the left edge of the text with the left edge of the cell. An alignment of 2 right-justifies the text, while 1 results in text centered within the cell. If ALIGNMENT is set equal to a scalar, all table cells are aligned as specified. If ALIGNMENT is set equal to a 2-D array, the alignment of each table cell is governed by the corresponding element of the array.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=941688">
 </A>
<A NAME="marker=941687">
 </A>
ALL_EVENTS</H4>
<P CLASS="Body">
<A NAME="pgfId=941689">
 </A>
Along with the EDITABLE keyword, ALL_EVENTS controls the type of events generated by the table widget. Set the ALL_EVENTS keyword to cause the full set of events to be generated. If ALL_EVENTS is not set, setting EDITABLE causes only end-of-line events to be generated. If EDITABLE is not set, all events are suppressed. See <A HREF="idl20a.htm#34574" CLASS="XRef">
Effects of using the ALL_EVENTS and EDITABLE keywords</A>
 for additional details.</P>
<CENTER><TABLE BORDER="1">
<CAPTION>
<UL>
<LI CLASS="Table">
<A NAME="pgfId=941745">
 </A>
<A NAME="34574">
 </A>
Effects of using the ALL_EVENTS and EDITABLE keywords</LI>
</UL>
<TR>
<TH ROWSPAN="1" COLSPAN="2">
<P CLASS="CellHeading">
<A NAME="pgfId=941696">
 </A>
Keywords</P>
</TH>
<TH ROWSPAN="1" COLSPAN="2">
<P CLASS="CellHeading">
<A NAME="pgfId=941700">
 </A>
Effects</P>
</TH>
</TR>
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId=941704">
 </A>
ALL_EVENTS</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId=941706">
 </A>
EDITABLE</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId=941708">
 </A>
Input changes widget contents?</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId=941710">
 </A>
Type of events generated.</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941712">
 </A>
Not set</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941714">
 </A>
Not set</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941716">
 </A>
No</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941718">
 </A>
None</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941720">
 </A>
Not set</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941722">
 </A>
Set</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941724">
 </A>
Yes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941726">
 </A>
End-of-line insertion</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941728">
 </A>
Set</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941730">
 </A>
Not set</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941732">
 </A>
No</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941734">
 </A>
All events</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941736">
 </A>
Set</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941738">
 </A>
Set</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941740">
 </A>
Yes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId=941742">
 </A>
All events</P>
</TD>
</TR>
</CAPTION>
</TABLE></CENTER>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=911360">
 </A>
<A NAME="marker=911359">
 </A>
COLUMN_LABELS</H4>
<P CLASS="Body">
<A NAME="pgfId=911361">
 </A>
Set this keyword equal to an array of strings used as label for the columns of the table widget. The default labels are of the form &quot;Column <EM CLASS="Emphasis">
n</EM>
&quot;, where <EM CLASS="Emphasis">
n</EM>
 is the column number. If this keyword is set to the empty string (<CODE CLASS="Code">
''</CODE>
), all column labels are set to be empty.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=909845">
 </A>
<A NAME="marker=909843">
 </A>
<A NAME="24459">
 </A>
COLUMN_MAJOR</H4>
<P CLASS="Body">
<A NAME="pgfId=909846">
 </A>
This keyword is only valid if the table data is organized as a vector of structures rather than a two-dimensional array. See the <A HREF="idl20a.htm#22424" CLASS="XRef">
VALUE</A>
 keyword for details.</P>
<P CLASS="Body">
<A NAME="pgfId=909850">
 </A>
Set this keyword to specify that the data should be read into the table as if each element of the vector is a structure containing one column's data. Note that the structures must all be of the same type, and must have one field for each row in the table. If this keyword is not set, the table widget behaves as if the ROW_MAJOR keyword were set.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896114">
 </A>
<A NAME="marker=896113">
 </A>
COLUMN_WIDTHS</H4>
<P CLASS="Body">
<A NAME="pgfId=896115">
 </A>
Set this keyword equal to an array of widths for the columns of the table widget. The widths are given in any of the units as specified with the UNITS keyword. If no width is specified for a column, that column is set to the default size, which varies by platform. If COLUMN_WIDTHS is set to a scalar value, all columns are set to that width.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896117">
 </A>
<A NAME="marker=896116">
 </A>
EDITABLE</H4>
<P CLASS="Body">
<A NAME="pgfId=896118">
 </A>
Set this keyword to allow direct user editing of the text widget contents. Normally, the text in text widgets is read-only. See <A HREF="idl20a.htm#34574" CLASS="XRef">
Effects of using the ALL_EVENTS and EDITABLE keywords</A>
 for a description of how EDITABLE interacts with the ALL_EVENTS keyword.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896120">
 </A>
<A NAME="marker=896119">
 </A>
EVENT_FUNC</H4>
<P CLASS="Body">
<A NAME="pgfId=896121">
 </A>
A string containing the name of a function to be called by the WIDGET_EVENT function when an event arrives from a widget in the widget hierarchy rooted at the newly-created widget.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896123">
 </A>
<A NAME="marker=896122">
 </A>
EVENT_PRO</H4>
<P CLASS="Body">
<A NAME="pgfId=896124">
 </A>
A string containing the name of a procedure to be called by the WIDGET_EVENT function when an event arrives from a widget in the widget hierarchy rooted at the newly-created widget.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896126">
 </A>
<A NAME="marker=896125">
 </A>
FONT</H4>
<P CLASS="Body">
<A NAME="pgfId=934167">
 </A>
The name of the font to be used by the widget. The font specified is a &quot;device font&quot; (an X Windows font on Motif systems; a TrueType or PostScript font on Windows or Macintosh systems). See <A HREF="fonts.html#11429" CLASS="XRef">
</A>
 for details on specifying names for device fonts. If this keyword is omitted, the default font is used.</P>
<P CLASS="Body">
<A NAME="pgfId=896128">
 </A>
A single font is shared by the row and column labels and by all of the cells in the widget.</P>
<UL>
<P CLASS="Note"><b><FONT SIZE=+1>NOTE: </FONT></b>
<A NAME="pgfId=923713">
 </A>
On Microsoft Windows platforms, if FONT is not specified, IDL uses the system default font. Different versions of Windows use different system default fonts; in general, the system default font is the font appropriate for the version of Windows in question.</LI>
</UL>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896130">
 </A>
<A NAME="marker=896129">
 </A>
FORMAT</H4>
<P CLASS="Body">
<A NAME="pgfId=896131">
 </A>
Set this keyword equal to a single string or array of strings that specify the format of data displayed within table cells. The string(s) are of the same form as used by the FORMAT keyword to the PRINT procedure, and the default format is the same as that used by the PRINT procedure.</P>
<UL>
<P CLASS="Caution"><b><FONT SIZE=+1>CAUTION: </FONT></b>
<A NAME="pgfId=911422">
 </A>
If the format specified is incompatible with the data displayed in a table cell, an error message is generated. Since the error is generated <EM CLASS="Emphasis">
for each cell displayed</EM>
, the number of messages printed is potentially large, and can slow execution significantly. Note also that each time a new cell is displayed (when scroll bars are repositioned, for example), a new error is generated <EM CLASS="Emphasis">
for each cell displayed</EM>
.</LI>
</UL>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896133">
 </A>
<A NAME="marker=896132">
 </A>
FRAME</H4>
<P CLASS="Body">
<A NAME="pgfId=896134">
 </A>
The value of this keyword specifies the width of a frame in units specified by the UNITS keyword (pixels are the default) to be drawn around the borders of the widget. Note that this keyword is only a &quot;hint&quot; to the toolkit, and may be ignored in some instances.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896136">
 </A>
<A NAME="marker=896135">
 </A>
FUNC_GET_VALUE</H4>
<P CLASS="Body">
<A NAME="pgfId=896137">
 </A>
A string containing the name of a function to be called when the GET_VALUE keyword to the WIDGET_CONTROL procedure is called for this widget. Using this technique allows you to change the value that should be returned for a widget. Compound widgets use this ability to define their values transparently to the user.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896151">
 </A>
<A NAME="marker=896150">
 </A>
GROUP_LEADER</H4>
<P CLASS="Body">
<A NAME="pgfId=896152">
 </A>
The widget ID of an existing widget that serves as &quot;group leader&quot; for the newly-created widget. When a group leader is killed, for any reason, all widgets in the group are also destroyed.</P>
<P CLASS="Body">
<A NAME="pgfId=896153">
 </A>
A given widget can be in more than one group. The WIDGET_CONTROL procedure can be used to add additional group associations to a widget. It is not possible to remove a widget from an existing group.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=911525">
 </A>
<A NAME="marker=911531">
 </A>
KBRD_FOCUS_EVENTS</H4>
<P CLASS="Body">
<A NAME="pgfId=911527">
 </A>
<A NAME="marker=911526">
 </A>
Set this keyword to make the base return keyboard focus events whenever the keyboard focus of the base changes. See the <A HREF="idl20a.htm#31457" CLASS="XRef">
Widget Events Returned by Table Widgets</A>
 section below for more information.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896155">
 </A>
<A NAME="marker=896154">
 </A>
KILL_NOTIFY</H4>
<P CLASS="Body">
<A NAME="pgfId=896156">
 </A>
Set this keyword to a string that contains the name of a procedure to be called automatically when the specified widget dies. Each widget is allowed a single such &quot;callback&quot; procedure. It can be removed by setting the routine to the null string (<CODE CLASS="Code">
''</CODE>
). Note that the procedure specified is used only if you are not using the XMANAGER procedure to manage your widgets.</P>
<P CLASS="Body">
<A NAME="pgfId=896157">
 </A>
The callback routine is called with the widget identifier as its only argument. At that point, the widget identifier can only be used with the WIDGET_CONTROL procedure to get or set the user value. All other requests that require a widget ID are disallowed for the target widget. The callback is not issued until the WIDGET_EVENT function is called.</P>
<P CLASS="Body">
<A NAME="pgfId=896158">
 </A>
If you use the XMANAGER procedure to manage your widgets, the value of this keyword is overwritten. Use the CLEANUP keyword to XMANAGER to specify a procedure to be called when a managed widget dies.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896163">
 </A>
<A NAME="marker=896162">
 </A>
NO_COPY</H4>
<P CLASS="Body">
<A NAME="pgfId=914014">
 </A>
Usually, when setting or getting widget user values, either at widget creation or using the SET_UVALUE and GET_UVALUE keywords to WIDGET_CONTROL, IDL makes a second copy of the data being transferred. Although this technique is fine for small data, it can have a significant memory cost when the data being copied is large.</P>
<P CLASS="Body">
<A NAME="pgfId=914015">
 </A>
If the NO_COPY keyword is set, IDL handles these operations differently. Rather than copy the source data, it takes the data away from the source and attaches it directly to the destination. This feature can be used by compound widgets to obtain state information from a UVALUE without all the memory copying that would otherwise occur. However, it has the side effect of causing the source variable to become undefined. On a &quot;set&quot; operation (using the UVALUE keyword to WIDGET_TABLE or the SET_UVALUE keyword to WIDGET_CONTROL), the variable passed as value becomes undefined. On a &quot;get&quot; operation (GET_UVALUE keyword to WIDGET_CONTROL), the user value of the widget in question becomes undefined.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=909873">
 </A>
<A NAME="marker=909872">
 </A>
NO_HEADERS</H4>
<P CLASS="Body">
<A NAME="pgfId=909874">
 </A>
Set this keyword to disable the display of the table widget's header area (where row and column labels are normally displayed).</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896166">
 </A>
<A NAME="marker=896165">
 </A>
NOTIFY_REALIZE</H4>
<P CLASS="Body">
<A NAME="pgfId=896167">
 </A>
Set this keyword to a string that contains the name of a procedure to be called automatically when the specified widget is realized. This callback occurs just once (because widgets are realized only once). Each widget is allowed a single such &quot;callback&quot; procedure. It can be removed by setting the routine to the null string (<CODE CLASS="Code">
''</CODE>
). The callback routine is called with the widget ID as its only argument.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896169">
 </A>
<A NAME="marker=896168">
 </A>
PRO_SET_VALUE</H4>
<P CLASS="Body">
<A NAME="pgfId=896170">
 </A>
A string containing the name of a procedure to be called when the SET_VALUE keyword to the WIDGET_CONTROL procedure is called for this widget. Using this technique allows you to designate a routine that sets the value for a widget. Compound widgets use this ability to define their values transparently to the user.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896172">
 </A>
<A NAME="marker=896171">
 </A>
RESIZEABLE_COLUMNS</H4>
<P CLASS="Body">
<A NAME="pgfId=896173">
 </A>
Set this keyword to allow the user to change the size of columns using the mouse. Note that if the NO_HEADERS keyword was set, the columns cannot be resized interactively.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=901244">
 </A>
<A NAME="marker=901243">
 </A>
RESIZEABLE_ROWS</H4>
<P CLASS="Body">
<A NAME="pgfId=901245">
 </A>
Set this keyword to allow the user to change the size of rows using the mouse. Note that if the NO_HEADERS keyword was set, the rows cannot be resized interactively.</P>
<P CLASS="Body">
<A NAME="pgfId=901246">
 </A>
Under Microsoft Windows, the row size cannot be changed.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896175">
 </A>
<A NAME="marker=896174">
 </A>
RESOURCE_NAME</H4>
<P CLASS="Body">
<A NAME="pgfId=896176">
 </A>
A string containing an X Window System resource name to be applied to the widget. See <A HREF="idl200.htm#71756" CLASS="XRef">
RESOURCE_NAME</A>
 for a complete discussion of this keyword.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=909879">
 </A>
<A NAME="marker=909878">
 </A>
ROW_HEIGHTS</H4>
<P CLASS="Body">
<A NAME="pgfId=909880">
 </A>
Set this keyword equal to an array of heights for the rows of the table widget. The heights are given in any of the units as specified with the UNITS keyword. If no height is specified for a row, that row is set to the default size, which varies by platform. If ROW_HEIGHTS is set to a scalar value, all of the row heights are set to that value.</P>
<UL>
<P CLASS="Note"><b><FONT SIZE=+1>NOTE: </FONT></b>
<A NAME="pgfId=934602">
 </A>
This keyword is not supported under Microsoft Windows.</LI>
</UL>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896181">
 </A>
<A NAME="marker=896180">
 </A>
ROW_LABELS</H4>
<P CLASS="Body">
<A NAME="pgfId=896182">
 </A>
Set this keyword equal to an array of strings to be used as labels for the rows of the table. I f no label is specified for a row, it receives the default label &quot;Row <EM CLASS="Emphasis">
n</EM>
&quot;, where <EM CLASS="Emphasis">
n</EM>
 is the row number. If this keyword is set to the empty string (<CODE CLASS="Code">
''</CODE>
), all row labels are set to be empty.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=909886">
 </A>
<A NAME="marker=909884">
 </A>
<A NAME="15520">
 </A>
ROW_MAJOR</H4>
<P CLASS="Body">
<A NAME="pgfId=909887">
 </A>
This keyword is only valid if the table data is organized as a vector of structures rather than a two-dimensional array. See the <A HREF="idl20a.htm#22424" CLASS="XRef">
VALUE</A>
 keyword for details.</P>
<P CLASS="Body">
<A NAME="pgfId=909891">
 </A>
Set this keyword to specify that the data should be read into the table as if each element of the vector is a structure containing one row's data. Note that the structures must all be of the same type, and must have one field for each column in the table. This is the default behavior if neither the COLUMN_MAJOR or ROW_MAJOR keyword is set.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896187">
 </A>
<A NAME="marker=896186">
 </A>
<A NAME="11786">
 </A>
SCR_XSIZE</H4>
<P CLASS="Body">
<A NAME="pgfId=896188">
 </A>
Set this keyword to the desired &quot;screen&quot; width of the widget, in units specified by the UNITS keyword (pixels are the default). Note that the screen width of the widget <EM CLASS="Emphasis">
includes</EM>
 the width of scroll bars, if any are present. Setting SCR_XSIZE overrides values set for the XSIZE or X_SCROLL_SIZE keywords. See <A HREF="idl20a.htm#41367" CLASS="XRef">
Note on Table Sizing</A>
.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896190">
 </A>
<A NAME="marker=896189">
 </A>
<A NAME="38379">
 </A>
SCR_YSIZE</H4>
<P CLASS="Body">
<A NAME="pgfId=896191">
 </A>
Set this keyword to the desired &quot;screen&quot; height of the widget, in units specified by the UNITS keyword (pixels are the default). Note that the screen height of the widget <EM CLASS="Emphasis">
includes</EM>
 the height of scroll bars, if any are present. Setting SCR_YSIZE overrides values set for the YSIZE or Y_SCROLL_SIZE keywords. See <A HREF="idl20a.htm#41367" CLASS="XRef">
Note on Table Sizing</A>
. </P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896193">
 </A>
<A NAME="marker=896192">
 </A>
SCROLL</H4>
<P CLASS="Body">
<A NAME="pgfId=896194">
 </A>
Set this keyword to give the widget scroll bars that allow viewing portions of the widget contents that are not currently on the screen. See <A HREF="idl20a.htm#41367" CLASS="XRef">
Note on Table Sizing</A>
</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896200">
 </A>
<A NAME="marker=896199">
 </A>
TRACKING_EVENTS</H4>
<P CLASS="Body">
<A NAME="pgfId=896201">
 </A>
Set this keyword to cause widget tracking events to be issued for the widget whenever the mouse pointer enters or leaves the region covered by that widget. For the structure of tracking events, see <A HREF="idl200.htm#72083" CLASS="XRef">
TRACKING_EVENTS</A>
 in the documentation for WIDGET_BASE.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896203">
 </A>
<A NAME="marker=896202">
 </A>
UNITS</H4>
<P CLASS="Body">
<A NAME="pgfId=896204">
 </A>
Set UNITS equal to 0 (zero) to specify that all measurements are in pixels (this is the default), to 1 (one) to specify that all measurements are in inches, or to 2 (two) to specify that all measurements are in centimeters.</P>
<UL>
<P CLASS="Note"><b><FONT SIZE=+1>NOTE: </FONT></b>
<A NAME="pgfId=896205">
 </A>
This keyword does not affect all sizing operations. Specifically, the value of UNITS is ignored when setting the XSIZE or YSIZE keywords to <A HREF="idl20a.htm#35831" CLASS="XRef">
WIDGET_TABLE</A>
. </LI>
</UL>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896207">
 </A>
<A NAME="marker=896206">
 </A>
UVALUE</H4>
<P CLASS="Body">
<A NAME="pgfId=896208">
 </A>
The &quot;user value&quot; to be assigned to the widget.</P>
<P CLASS="Body">
<A NAME="pgfId=896209">
 </A>
Each widget can contain a user-specified value of any data type and organization. This value is not used by the widget in any way, but exists entirely for the convenience of the IDL programmer. This keyword allows you to set this value when the widget is first created.</P>
<P CLASS="Body">
<A NAME="pgfId=896210">
 </A>
If UVALUE is not present, the widget's initial user value is undefined.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896212">
 </A>
<A NAME="marker=896211">
 </A>
<A NAME="22424">
 </A>
VALUE</H4>
<P CLASS="Body">
<A NAME="pgfId=896213">
 </A>
The initial value setting of the widget. The value of a table widget is either a two-dimensional array or a vector of structures.</P>
<P CLASS="Body">
<A NAME="pgfId=896886">
 </A>
If the value is specified as a two-dimensional array, all data must be of the same data type.</P>
<P CLASS="Body">
<A NAME="pgfId=896914">
 </A>
If the value is specified as a vector of structures, it can be displayed either in column-major or row-major format by setting either the <A HREF="idl20a.htm#24459" CLASS="XRef">
COLUMN_MAJOR</A>
 keyword or the <A HREF="idl20a.htm#15520" CLASS="XRef">
ROW_MAJOR</A>
 keyword. All of the structures must be of the same type, and must contain one field for each column (if COLUMN_MAJOR is set) or row (if ROW_MAJOR is set) in the table. If neither keyword is set, the data is displayed in row major format.</P>
<P CLASS="Body">
<A NAME="pgfId=923537">
 </A>
If none of [XY]SIZE, SCR_[XY]SIZE, or [XY]_SCROLL_SIZE is present, the size of the table is determined by the size of the array or vector of structures specified by VALUE. See <A HREF="idl20a.htm#41367" CLASS="XRef">
Note on Table Sizing</A>
.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896215">
 </A>
<A NAME="marker=896214">
 </A>
XOFFSET</H4>
<P CLASS="Body">
<A NAME="pgfId=896216">
 </A>
The horizontal offset of the widget in units specified by the UNITS keyword (pixels are the default) relative to its parent.</P>
<P CLASS="Body">
<A NAME="pgfId=896217">
 </A>
Specifying an offset relative to a row or column major base widget does not work because those widgets enforce their own layout policies. This keyword is primarily of use relative to a plain base widget. Note that it is best to avoid using this style of widget programming.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896219">
 </A>
<A NAME="marker=896218">
 </A>
<A NAME="19345">
 </A>
XSIZE</H4>
<P CLASS="Body">
<A NAME="pgfId=896220">
 </A>
The width of the widget in columns. If row labels are present, one column is automatically added to this value. See <A HREF="idl20a.htm#41367" CLASS="XRef">
Note on Table Sizing</A>
.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896223">
 </A>
<A NAME="marker=896222">
 </A>
<A NAME="36815">
 </A>
X_SCROLL_SIZE</H4>
<P CLASS="Body">
<A NAME="pgfId=896224">
 </A>
The XSIZE keyword always specifies the width of a widget, in columns. When the SCROLL keyword is specified, this size is not necessarily the same as the width of the visible area. The X_SCROLL_SIZE keyword allows you to set the width of the scrolling viewport independently of the actual width of the widget. See <A HREF="idl20a.htm#41367" CLASS="XRef">
Note on Table Sizing</A>
.</P>
<P CLASS="Body">
<A NAME="pgfId=923644">
 </A>
Use of the X_SCROLL_SIZE keyword implies SCROLL. This means that scroll bars will be added in both the horizontal and vertical directions when X_SCROLL_SIZE is specified. Because the default size of the scrolling viewport may differ between platforms, it is best to specify Y_SCROLL_SIZE when specifying X_SCROLL_SIZE.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896227">
 </A>
<A NAME="marker=896226">
 </A>
YOFFSET</H4>
<P CLASS="Body">
<A NAME="pgfId=896228">
 </A>
The vertical offset of the widget in units specified by the UNITS keyword (pixels are the default) relative to its parent. This offset is specified relative to the upper left corner of the parent widget.</P>
<P CLASS="Body">
<A NAME="pgfId=896229">
 </A>
Specifying an offset relative to a row or column major base widget does not work because those widgets enforce their own layout policies. This keyword is primarily of use relative to a plain base widget. Note that it is best to avoid using this style of widget programming.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896231">
 </A>
<A NAME="marker=896230">
 </A>
<A NAME="42287">
 </A>
YSIZE</H4>
<P CLASS="Body">
<A NAME="pgfId=896232">
 </A>
The height of the widget in rows. If column labels are present, one row is automatically added to this value. See <A HREF="idl20a.htm#41367" CLASS="XRef">
Note on Table Sizing</A>
.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896235">
 </A>
<A NAME="marker=896234">
 </A>
<A NAME="12755">
 </A>
Y_SCROLL_SIZE</H4>
<P CLASS="Body">
<A NAME="pgfId=896236">
 </A>
The YSIZE keyword always specifies the height of a widget. in rows. When the SCROLL keyword is specified, this size is not necessarily the same as the height of the visible area. The Y_SCROLL_SIZE keyword allows you to set the height of the scrolling viewport independently of the actual width of the widget. See <A HREF="idl20a.htm#41367" CLASS="XRef">
Note on Table Sizing</A>
.</P>
<P CLASS="Body">
<A NAME="pgfId=896237">
 </A>
Use of the Y_SCROLL_SIZE keyword implies SCROLL. This means that scroll bars will be added in both the horizontal and vertical directions when Y_SCROLL_SIZE is specified. Because the default size of the scrolling viewport may differ between platforms, it is best to specify X_SCROLL_SIZE when specifying Y_SCROLL_SIZE.</P>
</DIV>
</DIV>
<DIV>
<H3 CLASS="Heading-1R">
<A NAME="pgfId=896238">
 </A>
Keywords to WIDGET_CONTROL</H3>
<P CLASS="Body">
<A NAME="pgfId=896239">
 </A>
A number of keywords to the <A HREF="idl202.htm#17837" CLASS="XRef">
WIDGET_CONTROL</A>
 procedure affect the behavior of table widgets. In addition to those keywords that affect all widgets, the following are particularly useful: <A HREF="idl202.htm#71985" CLASS="XRef">
ALIGNMENT</A>
, <A HREF="idl202.htm#32203" CLASS="XRef">
ALL_TABLE_EVENTS</A>
, <A HREF="idl202.htm#63092" CLASS="XRef">
COLUMN_LABELS</A>
, <A HREF="idl202.htm#64301" CLASS="XRef">
COLUMN_WIDTHS</A>
, <A HREF="idl202.htm#45157" CLASS="XRef">
DELETE_COLUMNS</A>
, <A HREF="idl202.htm#55773" CLASS="XRef">
DELETE_ROWS</A>
, <A HREF="idl202.htm#43861" CLASS="XRef">
EDITABLE</A>
, <A HREF="idl202.htm#35113" CLASS="XRef">
EDIT_CELL</A>
, <A HREF="idl202.htm#17972" CLASS="XRef">
FORMAT</A>
, <A HREF="idl202.htm#27608" CLASS="XRef">
GET_VALUE</A>
, <A HREF="idl202.htm#31375" CLASS="XRef">
INSERT_COLUMNS</A>
, <A HREF="idl202.htm#44988" CLASS="XRef">
INSERT_ROWS</A>
, <A HREF="idl202.htm#22212" CLASS="XRef">
KBRD_FOCUS_EVENTS</A>
, <A HREF="idl202.htm#28507" CLASS="XRef">
ROW_LABELS</A>
, <A HREF="idl202.htm#22967" CLASS="XRef">
ROW_HEIGHTS</A>
, <A HREF="idl202.htm#84191" CLASS="XRef">
SET_TABLE_SELECT</A>
, <A HREF="idl202.htm#39713" CLASS="XRef">
SET_TABLE_VIEW</A>
, <A HREF="idl202.htm#56231" CLASS="XRef">
SET_TEXT_SELECT</A>
, <A HREF="idl202.htm#76956" CLASS="XRef">
SET_VALUE</A>
, <A HREF="idl202.htm#97259" CLASS="XRef">
TABLE_XSIZE</A>
, <A HREF="idl202.htm#49176" CLASS="XRef">
TABLE_YSIZE</A>
, <A HREF="idl202.htm#81108" CLASS="XRef">
USE_TABLE_SELECT</A>
, <A HREF="idl202.htm#17668" CLASS="XRef">
USE_TEXT_SELECT</A>
.</P>
</DIV>
<DIV>
<H3 CLASS="Heading-1R">
<A NAME="pgfId=896240">
 </A>
Keywords to WIDGET_INFO</H3>
<P CLASS="Body">
<A NAME="pgfId=896241">
 </A>
A number of keywords to the <A HREF="idl206.htm#45547" CLASS="XRef">
WIDGET_INFO</A>
 function return information that applies specifically to table widgets. In addition to those keywords that apply to all widgets, the following are particularly useful: <A HREF="idl206.htm#38022" CLASS="XRef">
COLUMN_WIDTHS</A>
, <A HREF="idl206.htm#21768" CLASS="XRef">
KBRD_FOCUS_EVENTS</A>
, <A HREF="idl206.htm#37426" CLASS="XRef">
ROW_HEIGHTS</A>
, <A HREF="idl206.htm#79085" CLASS="XRef">
TABLE_ALL_EVENTS</A>
, <A HREF="idl206.htm#60167" CLASS="XRef">
TABLE_EDITABLE</A>
, <A HREF="idl206.htm#75736" CLASS="XRef">
TABLE_EDIT_CELL</A>
, <A HREF="idl206.htm#87251" CLASS="XRef">
TABLE_SELECT</A>
, <A HREF="idl206.htm#31808" CLASS="XRef">
TABLE_VIEW</A>
, <A HREF="idl206.htm#81381" CLASS="XRef">
USE_TABLE_SELECT</A>
.</P>
</DIV>
<DIV>
<H3 CLASS="Heading-1R">
<A NAME="pgfId=896242">
 </A>
<A NAME="31457">
 </A>
Widget Events Returned by Table Widgets</H3>
<P CLASS="Body">
<A NAME="pgfId=911539">
 </A>
There are several variations of the table widget event structure depending on the specific event being reported. All of these structures contain the standard three fields (ID, TOP, and HANDLER) as well as an integer TYPE field that indicates which type of structure has been returned. Programs should always check the field type before referencing fields that are not present in all table event structures. The different table widget event structures are described below.</P>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896244">
 </A>
Insert Single Character (TYPE = 0)</H4>
<P CLASS="Body">
<A NAME="pgfId=896245">
 </A>
This is the type of structure returned when a single character is typed into a cell of a table widget by a user.</P>
<P CLASS="Code">
<A NAME="pgfId=896246">
 </A>
{WIDGET_TABLE_CH, ID:0L, TOP:0L, HANDLER:0L, TYPE:0, OFFSET:0L,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;CH:0B, X:0L, Y:0L }</P>
<P CLASS="Body">
<A NAME="pgfId=896247">
 </A>
OFFSET is the (zero-based) insertion position that will result after the character is inserted. CH is the ASCII value of the character. X and Y give the zero-based address of the cell within the table.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896248">
 </A>
Insert Multiple Characters (TYPE = 1)</H4>
<P CLASS="Body">
<A NAME="pgfId=896249">
 </A>
This is the type of structure returned when multiple characters are pasted into a cell by the window system.</P>
<P CLASS="Code">
<A NAME="pgfId=896250">
 </A>
{WIDGET_TABLE_STR, ID:0L, TOP:0L, HANDLER:0L, TYPE:1, OFFSET:0L,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;STR:'', X:0L, Y:0L}</P>
<P CLASS="Body">
<A NAME="pgfId=896251">
 </A>
OFFSET is the (zero-based) insertion position that will result after the text is inserted. STR is the string to be inserted. X and Y give the zero-based address of the cell within the table.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896252">
 </A>
Delete Text (TYPE = 2)</H4>
<P CLASS="Body">
<A NAME="pgfId=896253">
 </A>
This is the type of structure returned when any amount of text is deleted from a cell of a table widget.</P>
<P CLASS="Code">
<A NAME="pgfId=910896">
 </A>
{WIDGET_TABLE_DEL, ID:0L, TOP:0L, HANDLER:0L, TYPE:2, OFFSET:0L,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;LENGTH:0L, X:0L, Y:0L}</P>
<P CLASS="Body">
<A NAME="pgfId=910897">
 </A>
OFFSET is the (zero-based) character position of the first character deleted. It is also the insertion position that will result when the next character is inserted. LENGTH gives the number of characters involved. X and Y give the zero-based address of the cell within the table.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896256">
 </A>
Text Selection (TYPE = 3)</H4>
<P CLASS="Body">
<A NAME="pgfId=896257">
 </A>
This is the type of structure returned when an area of text is selected (highlighted) by the user.</P>
<P CLASS="Code">
<A NAME="pgfId=896258">
 </A>
{WIDGET_TABLE_TEXT_SEL, ID:0L, TOP:0L, HANDLER:0L, TYPE:3, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;OFFSET:0L, LENGTH:0L, X:0L, Y:0L}</P>
<P CLASS="Body">
<A NAME="pgfId=896259">
 </A>
The event announces a change in the insertion point. OFFSET is the (zero-based) character position of the first character to be selected. LENGTH gives the number of characters involved. A LENGTH of zero indicates that the widget has no selection, and that the insertion position is given by OFFSET. X and Y give the zero-based address of the cell within the table.</P>
<UL>
<P CLASS="Note"><b><FONT SIZE=+1>NOTE: </FONT></b>
<A NAME="pgfId=896260">
 </A>
Text insertion, text deletion, or any change in the current insertion point causes any current selection to be lost. In such cases, the loss of selection is implied by the text event reporting the insert/delete/movement and a separate zero length selection event is not sent.</LI>
</UL>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896261">
 </A>
Cell Selection (TYPE = 4)</H4>
<P CLASS="Body">
<A NAME="pgfId=896262">
 </A>
This is the type of structure returned when range of cells is selected (highlighted) or deselected by the user.</P>
<P CLASS="Code">
<A NAME="pgfId=934345">
 </A>
{WIDGET_TABLE_CELL_SEL, ID:0L, TOP:0L, HANDLER:0L, TYPE:4, SEL_LEFT:0L, SEL_TOP:0L, SEL_RIGHT:0L, SEL_BOTTOM:0L}</P>
<P CLASS="Body">
<A NAME="pgfId=896264">
 </A>
The event announces a change in the currently selected cells. The range of cells selected is given by the zero-based indices into the table specified by the SEL_LEFT, SEL_TOP, SEL_RIGHT, and SEL_BOTTOM fields. When cells are deselected (either by changing the selection or by clicking in the upper left corner of the table) an event is generated in which the SEL_LEFT, SEL_TOP, SEL_RIGHT, and SEL_BOTTOM fields contain the value -1.</P>
<UL>
<P CLASS="Note"><b><FONT SIZE=+1>NOTE: </FONT></b>
<A NAME="pgfId=912233">
 </A>
This means that two WIDGET_TABLE_CELL_SEL events are generated when an existing selection is changed to a new selection. If your code pays attention to WIDGET_TABLE_CELL_SEL events, be sure to differentiate between select and deselect events.</LI>
</UL>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896270">
 </A>
Row Height Changed (TYPE = 6)</H4>
<P CLASS="Body">
<A NAME="pgfId=896271">
 </A>
This is the type of structure returned when a row height is changed by the user.</P>
<P CLASS="Code">
<A NAME="pgfId=896272">
 </A>
{WIDGET_TABLE_ROW_HEIGHT, ID:0L, TOP:0L, HANDLER:0L, TYPE:6,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;ROW:0L, HEIGHT:0L}</P>
<P CLASS="Body">
<A NAME="pgfId=896273">
 </A>
The event announces that the height of the given row has been changed by the user. The ROW field contains the zero-based row number, and the HEIGHT field contains the new height.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896274">
 </A>
Column Width Changed (TYPE = 7)</H4>
<P CLASS="Body">
<A NAME="pgfId=896275">
 </A>
This is the type of structure returned when a column width is changed by the user.</P>
<P CLASS="Code">
<A NAME="pgfId=896276">
 </A>
{WIDGET_TABLE_COLUMN_WIDTH, ID:0L, TOP:0L, HANDLER:0L, TYPE:7, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;COLUMN:0L, WIDTH:0L}</P>
<P CLASS="Body">
<A NAME="pgfId=896277">
 </A>
The event announces that the width of the given column has been changed by the user. The COLUMN field contains the zero-based column number, and the WIDTH field contains the new width.</P>
</DIV>
<DIV>
<H4 CLASS="Argument">
<A NAME="pgfId=896278">
 </A>
Invalid Data (TYPE = 8)</H4>
<P CLASS="Body">
<A NAME="pgfId=896279">
 </A>
This is the type of structure returned when the text entered by the user does not pass validation, and the user has finished editing the field (by hitting TAB or ENTER).</P>
<P CLASS="Code">
<A NAME="pgfId=896280">
 </A>
{WIDGET_TABLE_INVALID_ENTRY, ID:0L, TOP:0L, HANDLER:0L, TYPE:8,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;STR:'', X:0L, Y:0L}</P>
<P CLASS="Body">
<A NAME="pgfId=896281">
 </A>
When this event is generated, the cell's data is left unchanged. The invalid contents entered by the user is given as a text string in the STR field. The cell location is given by the X and Y fields.</P>
<DIV>
<H6 CLASS="Heading-3R">
<A NAME="pgfId=911533">
 </A>
Keyboard Focus Events</H6>
<P CLASS="Body">
<A NAME="pgfId=911534">
 </A>
Table widgets return the following event structure when the keyboard focus changes and the base was created with the KBRD_FOCUS_EVENTS keyword set:</P>
<P CLASS="Code">
<A NAME="pgfId=911535">
 </A>
{ WIDGET_KBRD_FOCUS, ID:0L, TOP:0L, HANDLER:0L, ENTER:0 }</P>
<P CLASS="Body">
<A NAME="pgfId=911536">
 </A>
ID is the widget ID of the table widget generating the event. TOP is the widget ID of the top level widget containing ID. HANDLER contains the widget ID of the widget associated with the handler routine. The ENTER field returns 1 (one) if the table widget is gaining the keyboard focus, or 0 (zero) if the table widget is losing the keyboard focus.</P>
</DIV>
</DIV>
</DIV>
<DIV>
<H3 CLASS="Heading-1R">
<A NAME="pgfId=896282">
 </A>
See Also</H3>
<P CLASS="Body">
<A NAME="pgfId=919221">
 </A>
<A HREF="idl202.htm#17837" CLASS="XRef">
WIDGET_CONTROL</A>
</P>
</DIV>
</BODY>
</HTML>
